From bdeb0c578a4db13177134cdc7a8b5a24b4da853e Mon Sep 17 00:00:00 2001
From: Elyes Haouas <ehaouas@noos.fr>
Date: Fri, 4 Mar 2022 07:41:57 +0100
Subject: [PATCH 10/28] disk: Remove trailing whitespaces

Signed-off-by: Elyes Haouas <ehaouas@noos.fr>
Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

Upstream-Status: Backport [c6793df7912f49c4321370574a3c638ec8c803bd]
Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 grub-core/disk/ahci.c             | 24 ++++++++++++------------
 grub-core/disk/ata.c              | 14 +++++++-------
 grub-core/disk/cryptodisk.c       | 26 +++++++++++++-------------
 grub-core/disk/diskfilter.c       | 24 ++++++++++++------------
 grub-core/disk/efi/efidisk.c      |  4 ++--
 grub-core/disk/geli.c             | 10 +++++-----
 grub-core/disk/i386/pc/biosdisk.c | 16 ++++++++--------
 grub-core/disk/ieee1275/ofdisk.c  |  6 +++---
 grub-core/disk/ldm.c              |  4 ++--
 grub-core/disk/luks.c             |  4 ++--
 grub-core/disk/lvm.c              |  4 ++--
 grub-core/disk/mdraid1x_linux.c   |  8 ++++----
 grub-core/disk/pata.c             |  2 +-
 grub-core/disk/scsi.c             |  8 ++++----
 grub-core/disk/usbms.c            | 26 +++++++++++++-------------
 15 files changed, 90 insertions(+), 90 deletions(-)

diff --git a/grub-core/disk/ahci.c b/grub-core/disk/ahci.c
index 0e6d56c24..e7b5dc5f2 100644
--- a/grub-core/disk/ahci.c
+++ b/grub-core/disk/ahci.c
@@ -150,7 +150,7 @@ struct grub_ahci_device
   int atapi;
 };
 
-static grub_err_t 
+static grub_err_t
 grub_ahci_readwrite_real (struct grub_ahci_device *dev,
 			  struct grub_disk_ata_pass_through_parms *parms,
 			  int spinup, int reset);
@@ -457,7 +457,7 @@ grub_ahci_pciinit (grub_pci_device_t dev,
 	grub_dprintf ("ahci", "port: %d, err: %x\n", adevs[i]->port,
 		      adevs[i]->hba->ports[adevs[i]->port].sata_error);
 
-	adevs[i]->rfis = grub_memalign_dma32 (4096, 
+	adevs[i]->rfis = grub_memalign_dma32 (4096,
 					     sizeof (struct grub_ahci_received_fis));
 	grub_memset ((char *) grub_dma_get_virt (adevs[i]->rfis), 0,
 		     sizeof (struct grub_ahci_received_fis));
@@ -543,7 +543,7 @@ grub_ahci_pciinit (grub_pci_device_t dev,
 		      adevs[i]->hba->ports[adevs[i]->port].sata_error);
 
 	grub_dprintf ("ahci", "port %d, offset: %x, tfd:%x, CMD: %x\n", adevs[i]->port,
-		      (int) ((char *) &adevs[i]->hba->ports[adevs[i]->port].task_file_data - 
+		      (int) ((char *) &adevs[i]->hba->ports[adevs[i]->port].task_file_data -
 			     (char *) adevs[i]->hba),
 		      adevs[i]->hba->ports[adevs[i]->port].task_file_data,
 		      adevs[i]->hba->ports[adevs[i]->port].command);
@@ -557,7 +557,7 @@ grub_ahci_pciinit (grub_pci_device_t dev,
     if (adevs[i])
       {
 	grub_dprintf ("ahci", "port %d, offset: %x, tfd:%x, CMD: %x\n", adevs[i]->port,
-		      (int) ((char *) &adevs[i]->hba->ports[adevs[i]->port].task_file_data - 
+		      (int) ((char *) &adevs[i]->hba->ports[adevs[i]->port].task_file_data -
 			     (char *) adevs[i]->hba),
 		      adevs[i]->hba->ports[adevs[i]->port].task_file_data,
 		      adevs[i]->hba->ports[adevs[i]->port].command);
@@ -702,7 +702,7 @@ grub_ahci_fini_hw (int noreturn __attribute__ ((unused)))
   return GRUB_ERR_NONE;
 }
 
-static int 
+static int
 reinit_port (struct grub_ahci_device *dev)
 {
   struct grub_pci_dma_chunk *command_list;
@@ -743,7 +743,7 @@ reinit_port (struct grub_ahci_device *dev)
 
   dev->hba->ports[dev->port].fbs = 2;
 
-  dev->rfis = grub_memalign_dma32 (4096, 
+  dev->rfis = grub_memalign_dma32 (4096,
 				   sizeof (struct grub_ahci_received_fis));
   grub_memset ((char *) grub_dma_get_virt (dev->rfis), 0,
 	       sizeof (struct grub_ahci_received_fis));
@@ -861,13 +861,13 @@ static const int register_map[11] = { 3 /* Features */,
 				      13 /* Sectors 48  */,
 				      8 /* LBA48 low */,
 				      9 /* LBA48 mid */,
-				      10 /* LBA48 high */ }; 
+				      10 /* LBA48 high */ };
 
 static grub_err_t
 grub_ahci_reset_port (struct grub_ahci_device *dev, int force)
 {
   grub_uint64_t endtime;
-  
+
   dev->hba->ports[dev->port].sata_error = dev->hba->ports[dev->port].sata_error;
 
   if (force || (dev->hba->ports[dev->port].command_issue & 1)
@@ -913,7 +913,7 @@ grub_ahci_reset_port (struct grub_ahci_device *dev, int force)
   return GRUB_ERR_NONE;
 }
 
-static grub_err_t 
+static grub_err_t
 grub_ahci_readwrite_real (struct grub_ahci_device *dev,
 			  struct grub_disk_ata_pass_through_parms *parms,
 			  int spinup, int reset)
@@ -928,7 +928,7 @@ grub_ahci_readwrite_real (struct grub_ahci_device *dev,
 
   if (!reset)
     grub_ahci_reset_port (dev, 0);
- 
+
   grub_dprintf ("ahci", "AHCI tfd = %x\n",
 		dev->hba->ports[dev->port].task_file_data);
   dev->hba->ports[dev->port].task_file_data = 0;
@@ -990,7 +990,7 @@ grub_ahci_readwrite_real (struct grub_ahci_device *dev,
   dev->command_table[0].cfis[0] = GRUB_AHCI_FIS_REG_H2D;
   dev->command_table[0].cfis[1] = 0x80;
   for (i = 0; i < sizeof (parms->taskfile.raw); i++)
-    dev->command_table[0].cfis[register_map[i]] = parms->taskfile.raw[i]; 
+    dev->command_table[0].cfis[register_map[i]] = parms->taskfile.raw[i];
 
   grub_dprintf ("ahci", "cfis: %02x %02x %02x %02x %02x %02x %02x %02x\n",
 		dev->command_table[0].cfis[0], dev->command_table[0].cfis[1],
@@ -1094,7 +1094,7 @@ grub_ahci_readwrite_real (struct grub_ahci_device *dev,
   return err;
 }
 
-static grub_err_t 
+static grub_err_t
 grub_ahci_readwrite (grub_ata_t disk,
 		     struct grub_disk_ata_pass_through_parms *parms,
 		     int spinup)
diff --git a/grub-core/disk/ata.c b/grub-core/disk/ata.c
index 3620a282e..8a96b854b 100644
--- a/grub-core/disk/ata.c
+++ b/grub-core/disk/ata.c
@@ -236,7 +236,7 @@ grub_ata_setaddress (struct grub_ata *dev,
 			     "sector %" PRIxGRUB_UINT64_T " cannot be "
 			     "addressed using CHS addressing",
 			     sector);
-	
+
 	parms->taskfile.disk = 0xE0 | head;
 	parms->taskfile.sectnum = sect;
 	parms->taskfile.cyllsb = cylinder & 0xFF;
@@ -345,7 +345,7 @@ grub_ata_readwrite (grub_disk_t disk, grub_disk_addr_t sector,
       parms.write = rw;
       if (ata->dma)
 	parms.dma = 1;
-  
+
       err = ata->dev->readwrite (ata, &parms, 0);
       if (err)
 	return err;
@@ -430,7 +430,7 @@ grub_ata_iterate_iter (int id, int bus, void *data)
       grub_ata_real_close (ata);
       return 0;
     }
-  grub_snprintf (devname, sizeof (devname), 
+  grub_snprintf (devname, sizeof (devname),
 		 "%s%d", grub_scsi_names[id], bus);
   ret = ctx->hook (devname, ctx->hook_data);
   grub_ata_real_close (ata);
@@ -443,7 +443,7 @@ grub_ata_iterate (grub_disk_dev_iterate_hook_t hook, void *hook_data,
 {
   struct grub_ata_iterate_ctx ctx = { hook, hook_data };
   grub_ata_dev_t p;
-  
+
   for (p = grub_ata_dev_list; p; p = p->next)
     if (p->iterate && p->iterate (grub_ata_iterate_iter, &ctx, pull))
       return 1;
@@ -546,7 +546,7 @@ grub_atapi_read (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
 
   parms.size = size;
   parms.buffer = buf;
-  
+
   err = dev->dev->readwrite (dev, &parms, 0);
   if (err)
     return err;
@@ -575,7 +575,7 @@ grub_atapi_open (int id, int bus, struct grub_scsi *scsi)
   ata = grub_ata_real_open (id, bus);
   if (!ata)
     return grub_errno;
-    
+
   if (! ata->atapi)
     return grub_error (GRUB_ERR_UNKNOWN_DEVICE, "no such ATAPI device");
 
@@ -623,7 +623,7 @@ grub_atapi_iterate (grub_scsi_dev_iterate_hook_t hook, void *hook_data,
 {
   struct grub_atapi_iterate_ctx ctx = { hook, hook_data };
   grub_ata_dev_t p;
-  
+
   for (p = grub_ata_dev_list; p; p = p->next)
     if (p->iterate && p->iterate (grub_atapi_iterate_iter, &ctx, pull))
       return 1;
diff --git a/grub-core/disk/cryptodisk.c b/grub-core/disk/cryptodisk.c
index e7c4795fd..9f5dc7acb 100644
--- a/grub-core/disk/cryptodisk.c
+++ b/grub-core/disk/cryptodisk.c
@@ -351,18 +351,18 @@ grub_cryptodisk_endecrypt (struct grub_cryptodisk *dev,
 					   dev->cipher->cipher->blocksize);
 	    if (err)
 	      return err;
-	    
+
 	    for (j = 0; j < (1U << log_sector_size);
 		 j += dev->cipher->cipher->blocksize)
 	      {
 		grub_crypto_xor (data + i + j, data + i + j, iv,
 				 dev->cipher->cipher->blocksize);
 		if (do_encrypt)
-		  err = grub_crypto_ecb_encrypt (dev->cipher, data + i + j, 
+		  err = grub_crypto_ecb_encrypt (dev->cipher, data + i + j,
 						 data + i + j,
 						 dev->cipher->cipher->blocksize);
 		else
-		  err = grub_crypto_ecb_decrypt (dev->cipher, data + i + j, 
+		  err = grub_crypto_ecb_decrypt (dev->cipher, data + i + j,
 						 data + i + j,
 						 dev->cipher->cipher->blocksize);
 		if (err)
@@ -381,11 +381,11 @@ grub_cryptodisk_endecrypt (struct grub_cryptodisk *dev,
 	    lrw_xor (&sec, dev, data + i);
 
 	    if (do_encrypt)
-	      err = grub_crypto_ecb_encrypt (dev->cipher, data + i, 
+	      err = grub_crypto_ecb_encrypt (dev->cipher, data + i,
 					     data + i,
 					     (1U << log_sector_size));
 	    else
-	      err = grub_crypto_ecb_decrypt (dev->cipher, data + i, 
+	      err = grub_crypto_ecb_decrypt (dev->cipher, data + i,
 					     data + i,
 					     (1U << log_sector_size));
 	    if (err)
@@ -595,7 +595,7 @@ grub_cryptodisk_setkey (grub_cryptodisk_t dev, grub_uint8_t *key, grub_size_t ke
     real_keysize /= 2;
   if (dev->mode == GRUB_CRYPTODISK_MODE_LRW)
     real_keysize -= dev->cipher->cipher->blocksize;
-	
+
   /* Set the PBKDF2 output as the cipher key.  */
   err = grub_crypto_cipher_set_key (dev->cipher, key, real_keysize);
   if (err)
@@ -1083,7 +1083,7 @@ grub_cryptodisk_cheat_mount (const char *sourcedev, const char *cheat)
 
   if (dev)
     {
-      grub_disk_close (source);	
+      grub_disk_close (source);
       return GRUB_ERR_NONE;
     }
 
@@ -1321,7 +1321,7 @@ luks_script_get (grub_size_t *sz)
 	switch (i->mode)
 	  {
 	  case GRUB_CRYPTODISK_MODE_ECB:
-	    ptr = grub_stpcpy (ptr, "-ecb"); 
+	    ptr = grub_stpcpy (ptr, "-ecb");
 	    break;
 	  case GRUB_CRYPTODISK_MODE_CBC:
 	    ptr = grub_stpcpy (ptr, "-cbc");
@@ -1340,19 +1340,19 @@ luks_script_get (grub_size_t *sz)
 	switch (i->mode_iv)
 	  {
 	  case GRUB_CRYPTODISK_MODE_IV_NULL:
-	    ptr = grub_stpcpy (ptr, "-null"); 
+	    ptr = grub_stpcpy (ptr, "-null");
 	    break;
 	  case GRUB_CRYPTODISK_MODE_IV_PLAIN:
-	    ptr = grub_stpcpy (ptr, "-plain"); 
+	    ptr = grub_stpcpy (ptr, "-plain");
 	    break;
 	  case GRUB_CRYPTODISK_MODE_IV_PLAIN64:
-	    ptr = grub_stpcpy (ptr, "-plain64"); 
+	    ptr = grub_stpcpy (ptr, "-plain64");
 	    break;
 	  case GRUB_CRYPTODISK_MODE_IV_BENBI:
-	    ptr = grub_stpcpy (ptr, "-benbi"); 
+	    ptr = grub_stpcpy (ptr, "-benbi");
 	    break;
 	  case GRUB_CRYPTODISK_MODE_IV_ESSIV:
-	    ptr = grub_stpcpy (ptr, "-essiv:"); 
+	    ptr = grub_stpcpy (ptr, "-essiv:");
 	    ptr = grub_stpcpy (ptr, i->essiv_hash->name);
 	    break;
 	  case GRUB_CRYPTODISK_MODE_IV_BYTECOUNT64:
diff --git a/grub-core/disk/diskfilter.c b/grub-core/disk/diskfilter.c
index 032011566..6d98c63ac 100644
--- a/grub-core/disk/diskfilter.c
+++ b/grub-core/disk/diskfilter.c
@@ -140,7 +140,7 @@ scan_disk_partition_iter (grub_disk_t disk, grub_partition_t p, void *data)
 #endif
 
   disk->partition = p;
-  
+
   for (arr = array_list; arr != NULL; arr = arr->next)
     {
       struct grub_diskfilter_pv *m;
@@ -155,7 +155,7 @@ scan_disk_partition_iter (grub_disk_t disk, grub_partition_t p, void *data)
   for (diskfilter = grub_diskfilter_list; diskfilter; diskfilter = diskfilter->next)
     {
 #ifdef GRUB_UTIL
-      grub_util_info ("Scanning for %s devices on disk %s", 
+      grub_util_info ("Scanning for %s devices on disk %s",
 		      diskfilter->name, name);
 #endif
       id.uuid = 0;
@@ -593,7 +593,7 @@ read_segment (struct grub_diskfilter_segment *seg, grub_disk_addr_t sector,
 	grub_disk_addr_t read_sector, far_ofs;
 	grub_uint64_t disknr, b, near, far, ofs;
 	unsigned int i, j;
-	    
+
 	read_sector = grub_divmod64 (sector, seg->stripe_size, &b);
 	far = ofs = near = 1;
 	far_ofs = 0;
@@ -612,17 +612,17 @@ read_segment (struct grub_diskfilter_segment *seg, grub_disk_addr_t sector,
 	    else
 	      far_ofs = grub_divmod64 (seg->raid_member_size,
 				       far * seg->stripe_size, 0);
-		
+
 	    far_ofs *= seg->stripe_size;
 	  }
 
-	read_sector = grub_divmod64 (read_sector * near, 
+	read_sector = grub_divmod64 (read_sector * near,
 				     seg->node_count,
 				     &disknr);
 
 	ofs *= seg->stripe_size;
 	read_sector *= ofs;
-	
+
 	while (1)
 	  {
 	    grub_size_t read_size;
@@ -677,7 +677,7 @@ read_segment (struct grub_diskfilter_segment *seg, grub_disk_addr_t sector,
 	    size -= read_size;
 	    if (! size)
 	      return GRUB_ERR_NONE;
-	    
+
 	    b = 0;
 	    disknr += (near - i);
 	    while (disknr >= seg->node_count)
@@ -738,7 +738,7 @@ read_segment (struct grub_diskfilter_segment *seg, grub_disk_addr_t sector,
 	  {
 	    grub_size_t read_size;
 	    int next_level;
-	    
+
 	    read_size = seg->stripe_size - b;
 	    if (read_size > size)
 	      read_size = size;
@@ -843,7 +843,7 @@ read_segment (struct grub_diskfilter_segment *seg, grub_disk_addr_t sector,
 		  disknr = 0;
 	      }
 	  }
-      }   
+      }
       return GRUB_ERR_NONE;
     default:
       return grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
@@ -867,7 +867,7 @@ read_lv (struct grub_diskfilter_lv *lv, grub_disk_addr_t sector,
       grub_uint64_t to_read;
 
       extent = grub_divmod64 (sector, vg->extent_size, NULL);
-      
+
       /* Find the right segment.  */
       {
 	unsigned int i;
@@ -1203,8 +1203,8 @@ insert_array (grub_disk_t disk, const struct grub_diskfilter_pv_id *id,
 
   for (pv = array->pvs; pv; pv = pv->next)
     if (id->uuidlen == pv->id.uuidlen
-	&& id->uuidlen 
-	? (grub_memcmp (pv->id.uuid, id->uuid, id->uuidlen) == 0) 
+	&& id->uuidlen
+	? (grub_memcmp (pv->id.uuid, id->uuid, id->uuidlen) == 0)
 	: (pv->id.id == id->id))
       {
 	struct grub_diskfilter_lv *lv;
diff --git a/grub-core/disk/efi/efidisk.c b/grub-core/disk/efi/efidisk.c
index f077b5f55..562543b35 100644
--- a/grub-core/disk/efi/efidisk.c
+++ b/grub-core/disk/efi/efidisk.c
@@ -335,7 +335,7 @@ name_devices (struct grub_efidisk_data *devices)
 	{
 	  grub_efi_acpi_device_path_t *acpi
 	    = (grub_efi_acpi_device_path_t *) dp;
-	  /* Floppy EISA ID.  */ 
+	  /* Floppy EISA ID.  */
 	  if (acpi->hid == 0x60441d0 || acpi->hid == 0x70041d0
 	      || acpi->hid == 0x70141d1)
 	    is_floppy = 1;
@@ -707,7 +707,7 @@ grub_efidisk_get_device_handle (grub_disk_t disk)
 		 == GRUB_EFI_MEDIA_DEVICE_PATH_TYPE)
 		&& (GRUB_EFI_DEVICE_PATH_SUBTYPE (c->last_device_path)
 		    == GRUB_EFI_HARD_DRIVE_DEVICE_PATH_SUBTYPE)
-		&& (grub_partition_get_start (disk->partition) 
+		&& (grub_partition_get_start (disk->partition)
 		    == (hd->partition_start << (disk->log_sector_size
 						- GRUB_DISK_SECTOR_BITS)))
 		&& (grub_partition_get_len (disk->partition)
diff --git a/grub-core/disk/geli.c b/grub-core/disk/geli.c
index 23789c43f..445a66878 100644
--- a/grub-core/disk/geli.c
+++ b/grub-core/disk/geli.c
@@ -157,7 +157,7 @@ geli_rekey (struct grub_cryptodisk *dev, grub_uint64_t zoneno)
     return gcry_err;
 
   return grub_cryptodisk_setkey (dev, (grub_uint8_t *) key,
-				 dev->rekey_derived_size); 
+				 dev->rekey_derived_size);
 }
 
 static inline gcry_err_code_t
@@ -200,7 +200,7 @@ grub_util_get_geli_uuid (const char *dev)
   unsigned log_secsize;
   grub_uint8_t hdr[512];
   struct grub_geli_phdr *header;
-  char *uuid; 
+  char *uuid;
   gcry_err_code_t err;
 
   fd = grub_util_fd_open (dev, GRUB_UTIL_FD_O_RDONLY);
@@ -218,7 +218,7 @@ grub_util_get_geli_uuid (const char *dev)
     grub_util_error ("%s", _("couldn't read ELI metadata"));
 
   grub_util_fd_close (fd);
-	  
+
   COMPILE_TIME_ASSERT (sizeof (header) <= 512);
   header = (void *) &hdr;
 
@@ -292,7 +292,7 @@ configure_ciphers (grub_disk_t disk, grub_cryptomount_args_t cargs)
     {
       grub_dprintf ("geli", "not a boot volume\n");
       return NULL;
-    }    
+    }
 
   gcry_err = make_uuid (&header, uuid);
   if (gcry_err)
@@ -536,7 +536,7 @@ recover_key (grub_disk_t source, grub_cryptodisk_t dev, grub_cryptomount_args_t
 	  if (grub_le_to_cpu16 (header.alg) == 0x16)
 	    real_keysize *= 2;
 	  gcry_err = grub_cryptodisk_setkey (dev, candidate_key.cipher_key,
-					     real_keysize); 
+					     real_keysize);
 	  if (gcry_err)
 	    return grub_crypto_gcry_error (gcry_err);
 	}
diff --git a/grub-core/disk/i386/pc/biosdisk.c b/grub-core/disk/i386/pc/biosdisk.c
index 8ca250c77..81fd4e832 100644
--- a/grub-core/disk/i386/pc/biosdisk.c
+++ b/grub-core/disk/i386/pc/biosdisk.c
@@ -71,7 +71,7 @@ static int grub_biosdisk_get_num_floppies (void)
  *   non-zero, otherwise zero.
  */
 
-static int 
+static int
 grub_biosdisk_rw_int13_extensions (int ah, int drive, void *dap)
 {
   struct grub_bios_int_registers regs;
@@ -91,7 +91,7 @@ grub_biosdisk_rw_int13_extensions (int ah, int drive, void *dap)
  *   NSEC sectors from COFF/HOFF/SOFF into SEGMENT. If an error occurs,
  *   return non-zero, otherwise zero.
  */
-static int 
+static int
 grub_biosdisk_rw_standard (int ah, int drive, int coff, int hoff,
 			   int soff, int nsec, int segment)
 {
@@ -110,7 +110,7 @@ grub_biosdisk_rw_standard (int ah, int drive, int coff, int hoff,
       /* set bits 0-5 of %cl to sector */
       regs.ecx |= soff & 0x3f;
 
-      /* set %dh to head and %dl to drive */  
+      /* set %dh to head and %dl to drive */
       regs.edx = (drive & 0xff) | ((hoff << 8) & 0xff00);
       /* set %ah to AH */
       regs.eax = (ah << 8) & 0xff00;
@@ -153,7 +153,7 @@ grub_biosdisk_check_int13_extensions (int drive)
   regs.ebx = 0x55aa;
   regs.flags = GRUB_CPU_INT_FLAGS_DEFAULT;
   grub_bios_interrupt (0x13, &regs);
-  
+
   if (regs.flags & GRUB_CPU_INT_FLAGS_CARRY)
     return 0;
 
@@ -171,7 +171,7 @@ grub_biosdisk_check_int13_extensions (int drive)
  *   Return the geometry of DRIVE in CYLINDERS, HEADS and SECTORS. If an
  *   error occurs, then return non-zero, otherwise zero.
  */
-static int 
+static int
 grub_biosdisk_get_diskinfo_standard (int drive,
 				     unsigned long *cylinders,
 				     unsigned long *heads,
@@ -185,12 +185,12 @@ grub_biosdisk_get_diskinfo_standard (int drive,
   regs.flags = GRUB_CPU_INT_FLAGS_DEFAULT;
   grub_bios_interrupt (0x13, &regs);
 
-  /* Check if unsuccessful. Ignore return value if carry isn't set to 
+  /* Check if unsuccessful. Ignore return value if carry isn't set to
      workaround some buggy BIOSes. */
   if ((regs.flags & GRUB_CPU_INT_FLAGS_CARRY) && ((regs.eax & 0xff00) != 0))
     return (regs.eax & 0xff00) >> 8;
 
-  /* bogus BIOSes may not return an error number */  
+  /* bogus BIOSes may not return an error number */
   /* 0 sectors means no disk */
   if (!(regs.ecx & 0x3f))
     /* XXX 0x60 is one of the unused error numbers */
@@ -218,7 +218,7 @@ grub_biosdisk_get_diskinfo_real (int drive, void *drp, grub_uint16_t ax)
   regs.flags = GRUB_CPU_INT_FLAGS_DEFAULT;
   grub_bios_interrupt (0x13, &regs);
 
-  /* Check if unsuccessful. Ignore return value if carry isn't set to 
+  /* Check if unsuccessful. Ignore return value if carry isn't set to
      workaround some buggy BIOSes. */
   if ((regs.flags & GRUB_CPU_INT_FLAGS_CARRY) && ((regs.eax & 0xff00) != 0))
     return (regs.eax & 0xff00) >> 8;
diff --git a/grub-core/disk/ieee1275/ofdisk.c b/grub-core/disk/ieee1275/ofdisk.c
index 03674cb47..9b14d9720 100644
--- a/grub-core/disk/ieee1275/ofdisk.c
+++ b/grub-core/disk/ieee1275/ofdisk.c
@@ -380,7 +380,7 @@ grub_ofdisk_iterate (grub_disk_dev_iterate_hook_t hook, void *hook_data,
     return 0;
 
   scan ();
-  
+
   for (i = 0; i < ARRAY_SIZE (ofdisk_hash); i++)
     {
       static struct ofdisk_hash_ent *ent;
@@ -420,7 +420,7 @@ grub_ofdisk_iterate (grub_disk_dev_iterate_hook_t hook, void *hook_data,
 	  if (hook (ent->grub_shortest, hook_data))
 	    return 1;
 	}
-    }	  
+    }
   return 0;
 }
 
@@ -558,7 +558,7 @@ grub_ofdisk_prepare (grub_disk_t disk, grub_disk_addr_t sector)
       grub_ieee1275_open (disk->data, &last_ihandle);
       if (! last_ihandle)
 	return grub_error (GRUB_ERR_UNKNOWN_DEVICE, "can't open device");
-      last_devpath = disk->data;      
+      last_devpath = disk->data;
     }
 
   pos = sector << disk->log_sector_size;
diff --git a/grub-core/disk/ldm.c b/grub-core/disk/ldm.c
index 4577a51dc..053676070 100644
--- a/grub-core/disk/ldm.c
+++ b/grub-core/disk/ldm.c
@@ -259,7 +259,7 @@ make_vg (grub_disk_t disk,
 	    }
 	  grub_memcpy (pv->internal_id, ptr, (grub_size_t) ptr[0] + 1);
 	  pv->internal_id[(grub_size_t) ptr[0] + 1] = 0;
-	  
+
 	  ptr += *ptr + 1;
 	  if (ptr + *ptr + 1 >= vblk[i].dynamic
 	      + sizeof (vblk[i].dynamic))
@@ -835,7 +835,7 @@ make_vg (grub_disk_t disk,
   return NULL;
 }
 
-static struct grub_diskfilter_vg * 
+static struct grub_diskfilter_vg *
 grub_ldm_detect (grub_disk_t disk,
 		 struct grub_diskfilter_pv_id *id,
 		 grub_disk_addr_t *start_sector)
diff --git a/grub-core/disk/luks.c b/grub-core/disk/luks.c
index f0feb3844..46ae734ef 100644
--- a/grub-core/disk/luks.c
+++ b/grub-core/disk/luks.c
@@ -212,7 +212,7 @@ luks_recover_key (grub_disk_t source,
 
       grub_dprintf ("luks", "PBKDF2 done\n");
 
-      gcry_err = grub_cryptodisk_setkey (dev, digest, keysize); 
+      gcry_err = grub_cryptodisk_setkey (dev, digest, keysize);
       if (gcry_err)
 	{
 	  grub_free (split_key);
@@ -280,7 +280,7 @@ luks_recover_key (grub_disk_t source,
       grub_printf_ (N_("Slot %d opened\n"), i);
 
       /* Set the master key.  */
-      gcry_err = grub_cryptodisk_setkey (dev, candidate_key, keysize); 
+      gcry_err = grub_cryptodisk_setkey (dev, candidate_key, keysize);
       if (gcry_err)
 	{
 	  grub_free (split_key);
diff --git a/grub-core/disk/lvm.c b/grub-core/disk/lvm.c
index 8257159b3..794248540 100644
--- a/grub-core/disk/lvm.c
+++ b/grub-core/disk/lvm.c
@@ -132,7 +132,7 @@ grub_lvm_free_cache_lvs (struct cache_lv *cache_lvs)
     }
 }
 
-static struct grub_diskfilter_vg * 
+static struct grub_diskfilter_vg *
 grub_lvm_detect (grub_disk_t disk,
 		 struct grub_diskfilter_pv_id *id,
 		 grub_disk_addr_t *start_sector)
@@ -989,7 +989,7 @@ grub_lvm_detect (grub_disk_t disk,
 			lv1->segments[i].nodes[j].lv = lv2;
 		    }
 	      }
-	
+
       }
 
       {
diff --git a/grub-core/disk/mdraid1x_linux.c b/grub-core/disk/mdraid1x_linux.c
index 38444b02c..72e5cb6f4 100644
--- a/grub-core/disk/mdraid1x_linux.c
+++ b/grub-core/disk/mdraid1x_linux.c
@@ -129,10 +129,10 @@ grub_mdraid_detect (grub_disk_t disk,
       grub_uint32_t level;
       struct grub_diskfilter_vg *array;
       char *uuid;
-	
+
       if (size == GRUB_DISK_SIZE_UNKNOWN && minor_version == 0)
 	continue;
-	
+
       switch (minor_version)
 	{
 	case 0:
@@ -177,7 +177,7 @@ grub_mdraid_detect (grub_disk_t disk,
 	/* Spares aren't implemented.  */
 	return NULL;
 
-      if (grub_disk_read (disk, sector, 
+      if (grub_disk_read (disk, sector,
 			  (char *) (sb.dev_roles + grub_le_to_cpu32 (sb.dev_number))
 			  - (char *) &sb,
 			  sizeof (role), &role))
@@ -203,7 +203,7 @@ grub_mdraid_detect (grub_disk_t disk,
 					 grub_le_to_cpu32 (sb.raid_disks),
 					 sb.set_name,
 					 (sb.size)
-					 ? grub_le_to_cpu64 (sb.size) 
+					 ? grub_le_to_cpu64 (sb.size)
 					 : grub_le_to_cpu64 (sb.data_size),
 					 grub_le_to_cpu32 (sb.chunksize),
 					 grub_le_to_cpu32 (sb.layout),
diff --git a/grub-core/disk/pata.c b/grub-core/disk/pata.c
index c757e65ae..0578a93e1 100644
--- a/grub-core/disk/pata.c
+++ b/grub-core/disk/pata.c
@@ -123,7 +123,7 @@ grub_pata_wait (void)
 
 static void
 grub_pata_pio_read (struct grub_pata_device *dev, char *buf, grub_size_t size)
-{ 
+{
   unsigned int i;
 
   /* Read in the data, word by word.  */
diff --git a/grub-core/disk/scsi.c b/grub-core/disk/scsi.c
index 70767cf00..2a25b4b42 100644
--- a/grub-core/disk/scsi.c
+++ b/grub-core/disk/scsi.c
@@ -90,7 +90,7 @@ grub_scsi_test_unit_ready (grub_scsi_t scsi)
   struct grub_scsi_test_unit_ready tur;
   grub_err_t err;
   grub_err_t err_sense;
-  
+
   tur.opcode = grub_scsi_cmd_test_unit_ready;
   tur.lun = scsi->lun << GRUB_SCSI_LUN_SHIFT;
   tur.reserved1 = 0;
@@ -108,7 +108,7 @@ grub_scsi_test_unit_ready (grub_scsi_t scsi)
   if (err_sense != GRUB_ERR_NONE)
   	grub_errno = err;
   /* err_sense is ignored for now and Request Sense Data also... */
-  
+
   if (err)
     return err;
 
@@ -169,7 +169,7 @@ grub_scsi_read_capacity10 (grub_scsi_t scsi)
   rc.PMI = 0;
   rc.control = 0;
   rc.pad = 0;
-	
+
   err = scsi->dev->read (scsi, sizeof (rc), (char *) &rc,
 			 sizeof (rcd), (char *) &rcd);
 
@@ -204,7 +204,7 @@ grub_scsi_read_capacity16 (grub_scsi_t scsi)
   rc.alloc_len = grub_cpu_to_be32_compile_time (sizeof (rcd));
   rc.PMI = 0;
   rc.control = 0;
-	
+
   err = scsi->dev->read (scsi, sizeof (rc), (char *) &rc,
 			 sizeof (rcd), (char *) &rcd);
 
diff --git a/grub-core/disk/usbms.c b/grub-core/disk/usbms.c
index 380ca4c4c..b81e3ad9d 100644
--- a/grub-core/disk/usbms.c
+++ b/grub-core/disk/usbms.c
@@ -104,7 +104,7 @@ grub_usbms_cbi_reset (grub_usb_device_t dev, int interface)
                 { 0xff, 0xff, 0xff, 0xff, 0xff,
                   0xff, 0xff, 0xff, 0xff, 0xff }
               };
-  
+
   return grub_usbms_cbi_cmd (dev, interface, (grub_uint8_t *)&cbicb);
 }
 
@@ -161,7 +161,7 @@ grub_usbms_attach (grub_usb_device_t usbdev, int configno, int interfno)
        /* Experimental support of RBC, MMC-2, UFI, SFF-8070i devices */
        && interf->subclass != GRUB_USBMS_SUBCLASS_RBC
        && interf->subclass != GRUB_USBMS_SUBCLASS_MMC2
-       && interf->subclass != GRUB_USBMS_SUBCLASS_UFI 
+       && interf->subclass != GRUB_USBMS_SUBCLASS_UFI
        && interf->subclass != GRUB_USBMS_SUBCLASS_SFF8070 )
       || (interf->protocol != GRUB_USBMS_PROTOCOL_BULK
           && interf->protocol != GRUB_USBMS_PROTOCOL_CBI
@@ -215,7 +215,7 @@ grub_usbms_attach (grub_usb_device_t usbdev, int configno, int interfno)
   if (grub_usbms_devices[curnum]->protocol == GRUB_USBMS_PROTOCOL_BULK)
     { /* Only Bulk only devices support Get Max LUN command */
       err = grub_usb_control_msg (usbdev, 0xA1, 254, 0, interfno, 1, (char *) &luns);
-  		
+
       if (err)
         {
           /* In case of a stall, clear the stall.  */
@@ -231,7 +231,7 @@ grub_usbms_attach (grub_usb_device_t usbdev, int configno, int interfno)
       else
         /* luns = 0 means one LUN with ID 0 present ! */
         /* We get from device not number of LUNs but highest
-         * LUN number. LUNs are numbered from 0, 
+         * LUN number. LUNs are numbered from 0,
          * i.e. number of LUNs is luns+1 ! */
         grub_usbms_devices[curnum]->luns = luns + 1;
     }
@@ -239,7 +239,7 @@ grub_usbms_attach (grub_usb_device_t usbdev, int configno, int interfno)
     /* XXX: Does CBI devices support multiple LUNs ?
      * I.e., should we detect number of device's LUNs ? (How?) */
     grub_usbms_devices[curnum]->luns = 1;
-    
+
   grub_dprintf ("usbms", "alive\n");
 
   usbdev->config[configno].interf[interfno].detach_hook = grub_usbms_detach;
@@ -297,7 +297,7 @@ grub_usbms_transfer_bo (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
   grub_usb_err_t err = GRUB_USB_ERR_NONE;
   grub_usb_err_t errCSW = GRUB_USB_ERR_NONE;
   int retrycnt = 3 + 1;
-  
+
   tag++;
 
  retry:
@@ -314,7 +314,7 @@ grub_usbms_transfer_bo (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
   cbw.lun = scsi->lun; /* In USB MS CBW are LUN bits on another place than in SCSI CDB, both should be set correctly. */
   cbw.length = cmdsize;
   grub_memcpy (cbw.cbwcb, cmd, cmdsize);
-  
+
   /* Debug print of CBW content. */
   grub_dprintf ("usb", "CBW: sign=0x%08x tag=0x%08x len=0x%08x\n",
   	cbw.signature, cbw.tag, cbw.transfer_length);
@@ -344,7 +344,7 @@ grub_usbms_transfer_bo (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
   if (size && (read_write == 0))
     {
       err = grub_usb_bulk_read (dev->dev, dev->in, size, buf);
-      grub_dprintf ("usb", "read: %d %d\n", err, GRUB_USB_ERR_STALL); 
+      grub_dprintf ("usb", "read: %d %d\n", err, GRUB_USB_ERR_STALL);
       if (err)
         {
           if (err == GRUB_USB_ERR_STALL)
@@ -411,7 +411,7 @@ CheckCSW:
   grub_dprintf ("usb", "CSW: sign=0x%08x tag=0x%08x resid=0x%08x\n",
   	status.signature, status.tag, status.residue);
   grub_dprintf ("usb", "CSW: status=0x%02x\n", status.status);
-  
+
   /* If phase error or not valid signature, do bulk-only reset device. */
   if ((status.status == 2) ||
       (status.signature != grub_cpu_to_le32_compile_time(0x53425355)))
@@ -444,7 +444,7 @@ grub_usbms_transfer_cbi (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
   grub_usb_err_t err = GRUB_USB_ERR_NONE;
   grub_uint8_t cbicb[GRUB_USBMS_CBI_CMD_SIZE];
   grub_uint16_t status;
-  
+
  retry:
   retrycnt--;
   if (retrycnt == 0)
@@ -456,7 +456,7 @@ grub_usbms_transfer_cbi (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
                cmdsize >= GRUB_USBMS_CBI_CMD_SIZE
                  ? GRUB_USBMS_CBI_CMD_SIZE
                  : cmdsize);
-  
+
   /* Debug print of CBIcb content. */
   grub_dprintf ("usb", "cbicb:\n %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n",
   	cbicb[ 0], cbicb[ 1], cbicb[ 2], cbicb[ 3],
@@ -490,7 +490,7 @@ grub_usbms_transfer_cbi (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
   if (size && (read_write == 0))
     {
       err = grub_usb_bulk_read (dev->dev, dev->in, size, buf);
-      grub_dprintf ("usb", "read: %d\n", err); 
+      grub_dprintf ("usb", "read: %d\n", err);
       if (err)
         {
           if (err == GRUB_USB_ERR_STALL)
@@ -572,7 +572,7 @@ grub_usbms_transfer_cbi (struct grub_scsi *scsi, grub_size_t cmdsize, char *cmd,
 
   if (err)
     return grub_error (GRUB_ERR_IO, "USB error %d", err);
-    
+
   return GRUB_ERR_NONE;
 }
 
-- 
2.27.0

